from config_loader import load_config
from camera_handler import CameraHandler
# import asyncio # No longer needed here
import logging
import time
from datetime import datetime, timedelta
# Imports for simulation (should be commented out for production)
# from PIL import Image, ImageDraw
# from io import BytesIO
# from camera_handler import DetectionEvent as SimDetectionEvent

# Assuming VIPManager is in the same src directory
# from vip_manager import VIPManager # Moved to main try block
# Assuming TelegramNotifier is in the same src directory
# from telegram_notifier import TelegramNotifier # Moved to main try block


def setup_logging(log_file, log_level_str):
    numeric_level = getattr(logging, log_level_str.upper(), None)
    if not isinstance(numeric_level, int):
        raise ValueError(f'Invalid log level: {log_level_str}')

    logging.basicConfig(level=numeric_level,
                        format='%(asctime)s - %(name)s - %(levelname)s - [%(module)s.%(funcName)s:%(lineno)d] - %(message)s',
                        handlers=[
                            logging.FileHandler(log_file),
                            logging.StreamHandler()
                        ])
    logging.info("Logging configured.")

def format_telegram_message(vip_details, detection_event, direction="N/A"):
    plate = vip_details.get('plate_number', 'N/A')
    owner_name = vip_details.get('owner_name', 'N/A')
    house_number = vip_details.get('house_number', 'N/A')
    land_number = vip_details.get('land_number', 'N/A')
    vehicle_type = vip_details.get('type', 'N/A')

    event_time_str = detection_event.timestamp.strftime('%Y-%m-%d %H:%M:%S') \
        if isinstance(detection_event.timestamp, datetime) else str(detection_event.timestamp)

    title = "🟢 GRRA Notification:" # Removed Markdown from here, will be applied by notifier

    direction_text = str(direction).upper() # Ensure direction is string and uppercase
    if direction_text == "IN" or "IN" in direction_text :
        direction_emoji_symbol = "➡️🚪 IN"
    elif direction_text == "OUT":
        direction_emoji_symbol = "🚪⬅️ OUT"
    else:
        direction_emoji_symbol = f"↔️ {direction}" # Show original direction if not IN/OUT (e.g. N/A)

    status_line = f"{vehicle_type} {direction_emoji_symbol}" # Removed Markdown
    separator = "------------------------"
    plate_line = f"🚗 Plate: {plate}"
    owner_line = f"👤 Owner: {owner_name}"
    house_line = f"🏠 House: {house_number}"
    land_line = f"🏗️ Land: {land_number}"
    time_line = f"⏰ Time: {event_time_str}"
    camera_line = f"📷 Camera: {detection_event.camera_ip}"

    message = (
        f"{title}\n"
        f"{status_line}\n"
        f"{separator}\n"
        f"{plate_line}\n"
        f"{owner_line}\n"
        f"{house_line}\n"
        f"{land_line}\n"
        f"{time_line}\n"
        f"{camera_line}"
    )
    return message # This is now a plain string, escaping will be handled by notifier

def run_main_loop(config, cam_handler, vip_manager, telegram_notifier, camera_direction_map):
    detection_fetch_interval = config.getfloat('app', 'detection_fetch_interval_seconds', fallback=1.0)
    status_log_interval_minutes = config.getint('app', 'status_log_interval_minutes', fallback=60)
    last_status_log_time = datetime.now()

    logging.info(f"Starting main processing loop. Detection fetch interval: {detection_fetch_interval}s.")
    if status_log_interval_minutes > 0:
        logging.info(f"Status log interval: {status_log_interval_minutes} minutes.")

    cam_handler.start_monitoring()

    try:
        # --- TEMPORARY SIMULATION CODE (Ensure this is commented out for live run) ---
        # simulation_active = False # Set to True to enable one-shot simulation
        # simulation_triggered_this_run = False
        # simulation_timer_start = time.time()
        # --- END TEMPORARY SIMULATION CODE ---

        while True:
            detections = []
            # --- TEMPORARY SIMULATION CODE (Ensure this is commented out for live run) ---
            # if simulation_active and not simulation_triggered_this_run and (time.time() - simulation_timer_start > 5):
            #     logging.info("--- !!! TRIGGERING SIMULATED DETECTION EVENT (main.py) !!! ---")
            #     try:
            #         # These imports are needed here if simulation is active
            #         from PIL import Image, ImageDraw
            #         from io import BytesIO
            #         from camera_handler import DetectionEvent as SimDetectionEvent
            #         img = Image.new('RGB', (300, 150), color = (128, 200, 128))
            #         d = ImageDraw.Draw(img)
            #         d.text((20,20), "PLATE: ANR9163", fill=(0,0,0)) # A VIP plate
            #         d.text((20,50), "SIMULATED EVENT", fill=(0,0,0))
            #         d.text((20,80), f"CAM: 192.168.1.106 @ {datetime.now().strftime('%H:%M:%S')}", fill=(0,0,0))
            #         dummy_image_bytes = BytesIO()
            #         img.save(dummy_image_bytes, format='JPEG')
            #         simulated_image_data = dummy_image_bytes.getvalue()
            #         logging.info(f"Created simulated JPEG image of {len(simulated_image_data)} bytes.")

            #         simulated_event = SimDetectionEvent(
            #             plate_number="ANR9163", timestamp=datetime.now(), camera_ip="192.168.1.106", # This IP is IN
            #             image_data=simulated_image_data, event_details={'source': 'simulation'}
            #         )
            #         detections = [simulated_event]
            #         simulation_triggered_this_run = True
            #     except Exception as e_sim:
            #         logging.error(f"Error creating simulated event: {e_sim}", exc_info=True)
            #         detections = [] # Fallback to empty list
            # else:
            #     # Only fetch from camera if simulation didn't run or already ran this app execution
            #     if not (simulation_active and simulation_triggered_this_run and detections):
            #          detections = cam_handler.get_new_detections(max_items=5, timeout=detection_fetch_interval)
            # --- END TEMPORARY SIMULATION CODE ---

            # Standard operation:
            detections = cam_handler.get_new_detections(max_items=5, timeout=detection_fetch_interval)

            if detections:
                for det_event in detections:
                    logging.info(f"Processing: Plate={det_event.plate_number}, Cam={det_event.camera_ip}, ImgSize={len(det_event.image_data) if det_event.image_data else 0}, TS={det_event.timestamp}")

                    vip_details = vip_manager.get_vip_details(det_event.plate_number)
                    if vip_details:
                        logging.info(f"VIP DETECTED: Plate={det_event.plate_number}, Name={vip_details.get('owner_name')}, Type={vip_details.get('type')}")

                        direction = camera_direction_map.get(det_event.camera_ip, "N/A")
                        logging.debug(f"Determined direction for cam {det_event.camera_ip} as {direction}")

                        message_caption = format_telegram_message(vip_details, det_event, direction)

                        chat_id_to_notify = vip_details.get('chat_id')
                        if chat_id_to_notify:
                            logging.info(f"TIMESTAMP: Before calling send_notification_with_image: {datetime.now()}")
                            success = telegram_notifier.send_notification_with_image(
                                chat_id_to_notify,
                                message_caption,
                                det_event.image_data
                            )
                            logging.info(f"TIMESTAMP: After calling send_notification_with_image: {datetime.now()}")

                            if success:
                                logging.info(f"Notification with image (sync call) sent for {det_event.plate_number} to {chat_id_to_notify}.")
                            else:
                                logging.warning(f"Failed to send notification with image (sync call) for {det_event.plate_number} to {chat_id_to_notify}.")
                        else:
                            logging.warning(f"No chat_id found for VIP {det_event.plate_number} (Name: {vip_details.get('owner_name')}). Cannot send notification.")
                    else:
                        logging.debug(f"Plate {det_event.plate_number} (from {det_event.camera_ip}) is not in VIP list.")
            else:
                logging.debug(f"No new detections from queue in this cycle (timeout: {detection_fetch_interval}s).")

            if status_log_interval_minutes > 0 and \
               (datetime.now() - last_status_log_time) >= timedelta(minutes=status_log_interval_minutes):
                active_cam_threads = sum(1 for conn_thread in cam_handler.connections if conn_thread.is_alive())
                logging.info(f"Application still running. Active camera connections: {active_cam_threads}/{len(cam_handler.connections)}. VIPs loaded: {len(vip_manager.vip_data)}.")
                last_status_log_time = datetime.now()

    except KeyboardInterrupt:
        logging.info("KeyboardInterrupt received. Shutting down application...")
    except Exception as e:
        logging.critical(f"An unexpected error occurred in the main loop: {e}", exc_info=True)
    finally:
        logging.info("Stopping camera monitoring...")
        cam_handler.stop_monitoring()
        logging.info("Application main loop ended.")

if __name__ == '__main__':
    # These imports are only needed if simulation code above is active & uncommented
    # from PIL import Image, ImageDraw
    # from io import BytesIO
    # from camera_handler import DetectionEvent as SimDetectionEvent

    # It's better to import modules after logging is configured if they log on import,
    # or if there's a chance of circular dependencies (not an issue here yet).
    # However, for type hinting and clarity, top-level imports are standard.
    # For this project, TelegramNotifier and VIPManager are imported after logging setup.

    try:
        config = load_config('config.ini')

        log_file = config.get('app', 'log_file', fallback='anpr_app.log')
        log_level = config.get('app', 'log_level', fallback='INFO')
        # Setup logging ASAP
        setup_logging(log_file, log_level)

        logging.info("===================================================")
        logging.info("      ANPR Notification Application Starting     ")
        logging.info("===================================================")

        # Moved imports here to ensure their init logs use the configured logger
        from vip_manager import VIPManager
        from telegram_notifier import TelegramNotifier
        # camera_handler is imported at the top

        camera_ips_str = config.get('cameras', 'ips')
        camera_ips = [ip.strip() for ip in camera_ips_str.split(',')]
        vip_csv_path = config.get('files', 'vip_list_csv')
        bot_token = config.get('telegram', 'bot_token')

        camera_direction_map = {}
        if config.has_section('camera_directions'):
            for ip, direction_cfg_val in config.items('camera_directions'):
                camera_direction_map[ip.strip()] = direction_cfg_val.strip().upper()
            logging.info(f"Loaded camera directions: {camera_direction_map}")
        else:
            logging.warning("[camera_directions] section not found in config.ini. Direction will be unknown.")

        logging.info(f"Camera IPs to monitor: {camera_ips}")
        logging.info(f"VIP list CSV: {vip_csv_path}")
        # Check for placeholder more carefully
        is_placeholder_token = "YOUR_TELEGRAM_BOT_TOKEN_HERE" in bot_token or \
                               bot_token.endswith("_PLACEHOLDER") or \
                               len(bot_token) < 20
        logging.info(f"Telegram Bot Token is {'SET' if bot_token and not is_placeholder_token else 'NOT SET or placeholder'}")

        vip_manager = VIPManager(vip_csv_path)
        if not vip_manager.vip_data:
            logging.warning("VIP list is empty or failed to load. Check CSV path and format in config and data file.")

        telegram_notifier = TelegramNotifier(bot_token)

        cam_handler = CameraHandler(camera_ips, app_config=config)

        run_main_loop(config, cam_handler, vip_manager, telegram_notifier, camera_direction_map)

    except FileNotFoundError as e:
        print(f"FATAL STARTUP ERROR: Essential file not found. Details: {e}")
        if logging.getLogger().hasHandlers(): logging.critical(f"FATAL STARTUP ERROR: {e}", exc_info=True)
        else:
            with open('startup_error.log', 'a') as f_err: f_err.write(f"{datetime.now()} - FATAL STARTUP ERROR: {e}\n")
    except ValueError as e:
        print(f"FATAL STARTUP ERROR: Invalid value in configuration. Details: {e}")
        if logging.getLogger().hasHandlers(): logging.critical(f"FATAL STARTUP ERROR: Invalid value in configuration. {e}", exc_info=True)
        else:
            with open('startup_error.log', 'a') as f_err: f_err.write(f"{datetime.now()} - FATAL STARTUP ERROR: Invalid value in configuration. {e}\n")
    except Exception as e:
        print(f"AN UNEXPECTED FATAL STARTUP ERROR occurred: {e}")
        if logging.getLogger().hasHandlers(): logging.critical("An unexpected FATAL STARTUP ERROR occurred.", exc_info=True)
        else:
            with open('startup_error.log', 'a') as f_err: f_err.write(f"{datetime.now()} - AN UNEXPECTED FATAL STARTUP ERROR occurred: {e}\n")
    finally:
        if logging.getLogger().hasHandlers(): logging.info("Application shutdown sequence complete.")
        else: print("Application shutdown sequence complete (logging might not have been initialized).")
